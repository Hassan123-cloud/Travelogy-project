name: Pull Request Gate
on: 
  workflow_dispatch:
    
env:
  AZURE_APP_NAME: 'lummaps' # set this to your application"s name
  AZURE_WEBAPP_PACKAGE_PATH: './build' # set this to the path to your web app project, defaults to the repository root
  JDA_REGISTRY: 'https://jdasoftware.jfrog.io/jdasoftware/api/npm/npm/'
  CDN_PROFILE: 'cdnprofile'
jobs:
  test:
    name: Run formatting, linting, and tests
    runs-on: ubuntu-latest
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.PLAT_LUI_AZURE_CREDENTIALS_PROD }}
      - uses: Azure/get-keyvault-secrets@v1.1
        with:
          keyvault: "lui-portal-vault-ci-all"
          secrets: '*'
      - name: Checkout PR branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          ssh-key: ${{ secrets.SELF_CHECKOUT_SSH }}
          fetch-depth: 2
      - uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'
      - name: Checkout dependant DS actions
        uses: actions/checkout@master
        with:
          ssh-key: ${{ env.dsGhActionsCheckoutSshKey }}
          repository: JDA-Product-Development/ds-github-actions
          path: actions
      - name: Cache node modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        id: node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
      - name: Install Dependencies
        run: |
          npm config set _auth="${{env.artifactoryAuth}}"
          npm config set always-auth
          npm config set registry "${{env.artifactoryNpmUrl}}"
          npm config set @jda:registry "${{env.artifactoryNpmUrl}}"
          npm config set email no-reply@jda.com
          npm install
      - name: Check format
        run: |
          npm run prettier
      - name: Check linting
        run: |
          npm run lint
      - name: Execute Test Coverage
        run: |
          npm test
  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    steps:
      - name: Display debug info
        run: |
          cp "$GITHUB_EVENT_PATH" workload.json
      - name: Store debug info
        uses: actions/upload-artifact@v1
        with:
          name: workflow-payload
          path: workload.json
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.PLAT_LUI_AZURE_CREDENTIALS_PROD }}
      - uses: Azure/get-keyvault-secrets@v1.1
        with:
          keyvault: "lui-portal-vault-ci-all"
          secrets: '*'
        id: metaKeyVaultAction
      - name: Checking out ${{env.CHECKED_OUT_BRANCH}}
        uses: actions/checkout@v2
        with:
          ref: ${{env.CHECKED_OUT_BRANCH}}
          fetch-depth: 2
      - uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'
      - name: checkout dependant actions
        uses: actions/checkout@master
        with:
          ssh-key: ${{ env.luiGhActionsCheckoutSshKey }}
          repository: JDA-Product-Development/plat-lui-github-actions
          path: actions
      - name: Checkout Blue Yonder dependant actions
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ env.dsGhActionsCheckoutSshKey }}
          repository: JDA-Product-Development/ds-github-actions
          path: ds-actions
      - name: Blue Yonder ChatBotOps Action
        uses: ./ds-actions/by-gitops-bot
        id: chatbot
      - name: Cache node modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        id: node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
      - name: Cache multideploy script modules
        uses: actions/cache@v1
        env:
          cache-name: cache-multideploy-modules
        id: multideploy-node-modules
        with:
          path: actions/workflow-scripts/multideploy
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('actions/workflow-scripts/multideploy/**/package-lock.json') }}
      - name: Cache .npm modules
        uses: actions/cache@v1
        env:
          cache-name: cache-npm-modules
        id: npm-node-modules
        if: (steps.node-modules.outputs.cache-hit != 'true') || (steps.multideploy-node-modules.outputs.cache-hit != 'true')
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Apply credentials
        run: |
         ENV_CRED_NAME=$(echo LUIPORTALVAULTCI${DEPLOY_ENVIRONMENT:-qa} | tr '[:lower:]' '[:upper:]')
          echo "AZURE_CRED=${!ENV_CRED_NAME}" >> $GITHUB_ENV
      - name: BlueYonder Azure Login
        id: by-env-login
        uses: ./actions/by-azure-login
        with:
          creds: ${{ env.AZURE_CRED }}
      - name: Get vault name
        run: |
          [[ -n "${{steps.by-env-login.outputs.ci-vault-id}}" ]] && VAULT_ID="${{steps.by-env-login.outputs.ci-vault-id}}" || VAULT_ID="lui-portal-vault-ci-${{env.DEPLOY_ENV}}"
          echo "VAULT_ID=${VAULT_ID}" >> $GITHUB_ENV
      - uses: Azure/get-keyvault-secrets@v1.1
        with:
          keyvault: '${{env.VAULT_ID}}'
          secrets: '*'
      - uses: Azure/get-keyvault-secrets@v1.1
        with:
          keyvault: "lui-portal-vault-ci-${{env.DEPLOY_ENVIRONMENT}}"
          secrets: '*'
      - name: Set the name of the storage account
        run: |
          AZURE_PROJECT_PREFIX=${{steps.by-env-login.outputs.resource-prefix}}
          echo "ACCOUNT_NAME=${AZURE_PROJECT_PREFIX}${AZURE_APP_NAME}" >> $GITHUB_ENV
          echo "SOURCE_DIR=${AZURE_WEBAPP_PACKAGE_PATH}" >> $GITHUB_ENV
          echo "STORAGE_ACCOUNT_NAME=${AZURE_PROJECT_PREFIX}${AZURE_APP_NAME}${DEPLOY_ENVIRONMENT:-qa}" >> $GITHUB_ENV
          echo "AZURE_CDN_PROFILE=${AZURE_PROJECT_PREFIX}${CDN_PROFILE}${DEPLOY_ENVIRONMENT:-qa}" >> $GITHUB_ENV
          echo "AZURE_CDN_ENDPOINT=${AZURE_PROJECT_PREFIX}${AZURE_APP_NAME}${DEPLOY_ENVIRONMENT:-qa}" >> $GITHUB_ENV
      - name: Install dependencies
        run: |
          npm config set _auth="${{env.artifactoryAuth}}"
          npm config set always-auth
          npm config set registry "${{env.artifactoryNpmUrl}}"
          npm config set @jda:registry "${{env.artifactoryNpmUrl}}"
          npm config set email no-reply@jda.com
          npm install
      - name: Build App
        run: |
          npm run build
      - name: Set Runtime ENV variables
        run: |
          node ./.github/scripts/setRuntimeEnv.js $SOURCE_DIR/
      - name: Deploy to Azure storage
        run: |
          az storage blob service-properties update --account-name $STORAGE_ACCOUNT_NAME \
            --static-website \
            --index-document index.html \
            --404-document index.html
          az storage blob upload-batch -s $SOURCE_DIR -d \$web --account-name $STORAGE_ACCOUNT_NAME
      - name: Purge CDN
        run: |
          az cdn endpoint purge \
            --name $AZURE_CDN_ENDPOINT \
            --no-wait \
            --profile-name $AZURE_CDN_PROFILE \
            --content-paths '/*'
  e2e:
    name: Run e2e tests
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          ssh-key: ${{ secrets.SELF_CHECKOUT_SSH }}
          fetch-depth: 2
      - uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'
      - name: Cache node modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        id: node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.PLAT_LUI_AZURE_CREDENTIALS_PROD }}
      - uses: Azure/get-keyvault-secrets@v1.1
        with:
          keyvault: "lui-portal-vault-ci-all"
          secrets: "*"
        id: metaKeyVaultAction
      - name: Install dependencies
        if: steps.node-modules.outputs.cache-hit != 'true'
        run: |
          npm config set _auth="${{env.artifactoryAuth}}"
          npm config set always-auth
          npm config set registry "${{env.artifactoryNpmUrl}}"
          npm config set @jda:registry "${{env.artifactoryNpmUrl}}"
          npm config set email no-reply@jda.com
          npm install --prefer-offline --no-audit
      - name: Running tests
        run: |
          BAIL=1 \
          FUNCTIONAL_TEST_REALM=${{env.functionalTestRealm}} LUMINATE_PORTAL_URL=${{secrets.LUMINATE_PORTAL_URL}}  \
            APP_NAMESPACE="luminate-map-view" \
            FUNCTIONAL_TEST_IDP="${{env.functionalTestIdp}}" \
            FUNCTIONAL_TEST_USERNAME=${{ secrets.SERVICE_ACCOUNT_USER_NAME }} FUNCTIONAL_TEST_PASSWORD="${{ secrets.SERVICE_ACCOUNT_USER_PASSWORD }}"\
            SAUCE_USERNAME="${{env.saucelabsUser}}" SAUCE_ACCESS_KEY="${{env.saucelabsAccessKey}}" npm run test:e2e:saucelabs
  scan-dependencies:
    name: Dependencies Scan
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        id: node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
      - name: Cache multideploy script modules
        uses: actions/cache@v2
        env:
          cache-name: cache-multideploy-modules
        id: multideploy-node-modules
        with:
          path: actions/workflow-scripts/multideploy
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('actions/workflow-scripts/multideploy/**/package-lock.json') }}
      - name: Cache .npm modules
        uses: actions/cache@v2
        env:
          cache-name: cache-npm-modules
        id: npm-node-modules
        if: (steps.node-modules.outputs.cache-hit != 'true')
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.PLAT_LUI_AZURE_CREDENTIALS_PROD }}
      - uses: Azure/get-keyvault-secrets@v1.1
        with:
          keyvault: "lui-portal-vault-ci-all"
          secrets: "*"
        id: metaKeyVaultAction
      - name: Install dependencies
        run: |
          npm config set _auth="${{env.artifactoryAuth}}"
          npm config set always-auth
          npm config set registry "${{env.artifactoryNpmUrl}}"
          npm config set @jda:registry "${{env.artifactoryNpmUrl}}"
          npm config set email no-reply@jda.com
          npm install
      - name: Perform Blackduck scan
        uses: blackducksoftware/github-action@2.0.1
        with:
          args: '--blackduck.url="${{env.blackduckUrl}}"
          --blackduck.api.token="${{env.blackduckAuth}}"
          --detect.project.name="${{ env.blackduckProjectPrefix }}"$AZURE_APP_NAME
          --detect.project.version.name=master
          --detect.blackduck.signature.scanner.upload.source.mode=false
          --detect.blackduck.signature.scanner.exclusion.pattern.search.depth=0
          --detect.tools.excluded=SIGNATURE_SCAN
          --detect.project.tags=Portal,Platform,CommonUI
          --detect.wait.for.results=false
          --detect.risk.report.pdf=false
          --detect.npm.include.dev.dependencies=false
          --detect.report.timeout=3600
          --detect.project.user.groups=lumplatform-portal-admins,lumplatform-portal-users
          --detect.project.codelocation.unmap=true'

  finalize:
    name: Finalize run
    runs-on: ubuntu-latest
    needs: [scan-dependencies]
    steps:
      - run: echo Done running workflow

